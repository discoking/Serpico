[
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Planned",
        "exploitability": 10,
        "id": 1,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for SQL Injection:</paragraph><paragraph>A SQL injection attack consists of insertion or &quot;injection&quot; of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/SQL_Injection",
        "remediation": "<paragraph>The following is recommended to prevent SQL Injection:</paragraph><paragraph><bullet>Use of Prepared Statements (Parameterized Queries)</bullet></paragraph><paragraph><bullet>Use of Stored Procedures</bullet></paragraph><paragraph><bullet>Never trust user input, Escaping all User Supplied Input</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "SQL Injection",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 8,
        "discoverability": 10,
        "dread_total": 46,
        "effort": "Quick",
        "exploitability": 8,
        "id": 2,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for Cross-Site Scripting:</paragraph><paragraph>Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.</paragraph><paragraph>An attacker can use XSS to send a malicious script to an unsuspecting user. The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29",
        "remediation": "<paragraph>The following is recommended to remediate XSS vulnerabilities:</paragraph><paragraph><bullet>Never trust user input</bullet></paragraph><paragraph><bullet>Never insert untrusted data except in allowed locations</bullet></paragraph><paragraph><bullet>HTML escape before inserting untrusted data into HTML element content</bullet></paragraph><paragraph><bullet>Use whitelists in place for Black lists for input filtering</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Cross Site Scripting (XSS)",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 8,
        "discoverability": 8,
        "dread_total": 44,
        "effort": "Quick",
        "exploitability": 8,
        "id": 3,
        "overview": "<paragraph>The OWASP guide [1] gives the following description for Insecure Direct Object Reference:</paragraph><paragraph>Applications frequently use the actual name or key of an object when generating web pages. Applications do not always verify the user is authorized for the target object. This results in an insecure direct object reference flaw. Testers can easily manipulate parameter values to detect such flaws and code analysis quickly shows whether authorization is properly verified.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Top_10_2010-A4-Insecure_Direct_Object_References",
        "remediation": "<paragraph>Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource\u2019s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. </paragraph><paragraph>Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.</paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Direct Object References",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 5,
        "discoverability": 8,
        "dread_total": 29,
        "effort": "Quick",
        "exploitability": 3,
        "id": 4,
        "overview": "<paragraph>While reviewing &lt;&lt;CUSTOMER&gt;&gt;'s web server, web servers were discovered to disclose the system's internal IP address via the Content-Location header. The disclosure of the systems internal IP address gives an adversary an indication of how the internal network my be addressed.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; reconfigure their web servers to use the systems fully qualified domain name (FQDN).</paragraph>",
        "reproducability": 10,
        "risk": 2,
        "title": "Internal IP Address Disclosure",
        "type": "System Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 6,
        "approved": true,
        "damage": 7,
        "discoverability": 10,
        "dread_total": 40,
        "effort": "Quick",
        "exploitability": 7,
        "id": 5,
        "overview": "<paragraph>Simple Network Management Protocol (SNMP) is a protocol used for managing devices on the network. SNMP uses community stings to access the devices in either read or write mode. While conducting the internal assessment, several devices were discovered with the default SNMP community stings of private and public. </paragraph><paragraph>An adversary can use this access to view or change the devices configuration. In some cases passwords and other sensitive information can be extracted from the device. This information is used by an attacker access to other systems within the origination.</paragraph>",
        "poc": "<paragraph>The following screenshot shows information obtained from the vulnerable system &lt;IP&gt;:</paragraph><paragraph>&lt;insert a screenshot&gt;</paragraph><paragraph></paragraph><paragraph>The following IP addresses were confirmed vulnerable:</paragraph><paragraph>&lt;insert list of IP addresses&gt;</paragraph>",
        "references": "",
        "remediation": "<paragraph>SNMP community stings should be treated the same as account passwords.</paragraph><paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; implement the following password policy for SNMP configured devices:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces to create the pass phrase</bullet></paragraph><paragraph><bullet>Use pass phrases at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the pass phrase frequently</bullet></paragraph><paragraph><bullet>Do not reuse pass phrases</bullet></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "SNMP Configured with Default Password",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 6,
        "overview": "<paragraph>The Tomcat account ${ACCOUNT_NAME_HERE} was found to be configured with a blank or default password. An adversary could use this account to gain access to the management interface and deploy a malicious web archive file (WAR) file and comprise the system.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>The default Tomcat account passwords should be configured with a strong pass phrase. The following guide lines can be used for creating a pass phrase:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces to create the pass phrase</bullet></paragraph><paragraph><bullet>Use pass phrases at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the pass phrase frequently</bullet></paragraph><paragraph><bullet>Do not reuse pass phrases</bullet></paragraph>",
        "reproducability": 10,
        "risk": 3,
        "title": "Tomcat Manager with Default or Blank Passwords",
        "type": "System Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 7,
        "overview": "<paragraph>Microsoft SQL server comes with a built in System Administrator (SA) account. By default the SA account has full privileges. During the assessment the SA account was found to have a default password of SA or blank. An adversary can use this account to gain administrator level access to the database and can lead to a potential comprise of the system.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>The default SA account should be disabled. It is recommended to use Windows Authentication.  If this is not possible due to business reasons, the SA account should be configured with a strong password. The following guide lines can be used for creating a strong password:</paragraph><paragraph><bullet>Use alphanumeric, special characters and spaces</bullet></paragraph><paragraph><bullet>Use a password that is at least 32 characters long</bullet> </paragraph><paragraph><bullet>Change the password frequently</bullet></paragraph><paragraph><bullet>Do not reuse previous passwords</bullet></paragraph>",
        "reproducability": 10,
        "risk": 3,
        "title": "Weak SA Password on MSSQL Server",
        "type": "Database"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 8,
        "dread_total": 42,
        "effort": "Involved",
        "exploitability": 5,
        "id": 8,
        "overview": "<paragraph>Egress filtering is used to restrict and monitor outbound traffic from one network to another. During the internal assessment, the consultants discovered it was able to make arbitrary connections to hosts on the Internet. This showed a lack of egress filtering in place on &lt;&lt;CUSTOMER&gt;&gt;'s network.  An adversary can leverage  this lack of egress filtering to exfiltrate data from the network.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; implement an egress policy. The policy should deny all traffic by default and only allow approved traffic.  Only traffic necessary for business reasons should be allow out while all other traffic is denied.</paragraph>",
        "reproducability": 9,
        "risk": 3,
        "title": "Lack of Egress Filtering ",
        "type": "Network Security"
    },
    {
        "affected_hosts": null,
        "affected_users": 7,
        "approved": true,
        "damage": 7,
        "discoverability": 7,
        "dread_total": 35,
        "effort": "Planned",
        "exploitability": 7,
        "id": 9,
        "overview": "<paragraph>Quoting from [1], a Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with \u201cdot-dot-slash (../)\u201d sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration and critical system files, limited by system operational access control. The attacker uses \u201c../\u201d sequences to move up to root directory, thus permitting navigation through the file system.</paragraph><paragraph>This attack can be executed with an external malicious code injected on the path, like the Resource Injection attack. To perform this attack it\u2019s not necessary to use a specific tool; attackers typically use a spider/crawler to detect all URLs available.</paragraph><paragraph>This attack is also known as \u201cdot-dot-slash\u201d, \u201cdirectory traversal\u201d, \u201cdirectory climbing\u201d and \u201cbacktracking\u201d.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "<paragraph>https://www.owasp.org/index.php/Path_Traversal</paragraph><paragraph>http://cwe.mitre.org/data/definitions/22.html</paragraph><paragraph>http://www.webappsec.org/projects/threat/classes/path_traversal.shtml</paragraph>",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 7,
        "risk": 3,
        "title": "Path Traversal",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 3,
        "discoverability": 3,
        "dread_total": 15,
        "effort": "Quick",
        "exploitability": 3,
        "id": 10,
        "overview": "<paragraph>[1] The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 3,
        "risk": 1,
        "title": "Regular expression Denial of Service - ReDoS",
        "type": "Best Practice"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 11,
        "overview": "<paragraph>While reviewing the configuration of externally facing network devices, the consultant noted that the inbound (or ingress) rule set allowed for an excessive number of applications or ports. This is a critical risk to the organization.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph>It is recommended that &lt;&lt;CUSTOMER&gt;&gt; adopt a DENY unless required policy for inbound traffic.</paragraph>",
        "reproducability": 10,
        "risk": 0,
        "title": "Excessive Ingress Rule Set",
        "type": "Router Configuration"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 12,
        "overview": "<paragraph>The following server endpoints use an insecure Java RMI endpoint allowing for unauthenticated remote code execution. </paragraph><paragraph>Quoting the exploit discussion from [1], the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. As it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process.</paragraph><paragraph>RMI method calls do not support or require any sort of authentication.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/misc/java_rmi_server.rb",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Insecure Java RMI Endpoint",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 7,
        "approved": true,
        "damage": 7,
        "discoverability": 7,
        "dread_total": 35,
        "effort": "Quick",
        "exploitability": 7,
        "id": 13,
        "overview": "<paragraph>A number of services were identified which use a hardcoded password. The risk from this issue is that an attacker could login with an account from a hardcoded password.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 7,
        "risk": 0,
        "title": "Hard Coded Passwords in Use",
        "type": "Best Practice"
    },
    {
        "affected_hosts": null,
        "affected_users": 2,
        "approved": true,
        "damage": 2,
        "discoverability": 2,
        "dread_total": 10,
        "effort": "Quick",
        "exploitability": 2,
        "id": 14,
        "overview": "<paragraph>As discussed in Section 4.1 of the PCI DSS, SSLv2 cannot be used and will result in a failure of the host. There are numerous security risks associated with SSLv2 including:</paragraph><paragraph><bullet> No protection from against man-in-the-middle attacks during the handshake. </bullet></paragraph><paragraph><bullet> Weak MAC Construction </bullet></paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.pcisecuritystandards.org/pdfs/pcissc_assessors_nl_2008-11.pdf",
        "remediation": "<paragraph>Disable SSLv2 on all SSL endpoints.</paragraph>",
        "reproducability": 2,
        "risk": 1,
        "title": "SSL Server Supports SSLv2",
        "type": "Compliance"
    },
    {
        "affected_hosts": null,
        "affected_users": 3,
        "approved": true,
        "damage": 3,
        "discoverability": 3,
        "dread_total": 15,
        "effort": "Quick",
        "exploitability": 3,
        "id": 15,
        "overview": "<paragraph>A number of End of Life Operating Systems were found on the internal network (e.g. Microsoft Windows XP). The consultant abused the lack of patching on a subset of these systems to gain a foothold in the internal network.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 3,
        "risk": 3,
        "title": "End of Life Systems In Use",
        "type": "Network Internal"
    },
    {
        "affected_hosts": null,
        "affected_users": 5,
        "approved": true,
        "damage": 5,
        "discoverability": 5,
        "dread_total": 25,
        "effort": "Quick",
        "exploitability": 5,
        "id": 16,
        "overview": "<paragraph>An open mail relay is an SMTP server configured in such a way that it allows anyone on the Internet to send e-mail through it, not just mail destined to or originating from known users [1]. The risk to &lt;&lt;CUSTOMER&gt;&gt; is in the form of corporate integrity. Furthermore, &lt;&lt;CUSTOMER&gt;&gt; IPs maybe listed blacklisted as a SPAM host or malicious source. </paragraph><paragraph>There is no business value in an Open Mail Relay.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://en.wikipedia.org/wiki/Open_mail_relay",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 5,
        "risk": 1,
        "title": "Open Mail Relay Identified",
        "type": "Network Services"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 17,
        "overview": "<paragraph>An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, port scanning from the perspective of the machine where the parser is located, and other system impacts.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "XML External Entity (XXE) Processing ",
        "type": "Web Application"
    },
    {
        "affected_hosts": null,
        "affected_users": 1,
        "approved": true,
        "damage": 1,
        "discoverability": 1,
        "dread_total": 5,
        "effort": "Quick",
        "exploitability": 1,
        "id": 18,
        "overview": "<paragraph>During this assessment it was found that almost no logging or system auditing is in place. A mature system monitoring and logging process is critical to understand and analyze the implications from a security incident. Furthermore, it is an important step in the security maturity of an organization.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Logging_Cheat_Sheet",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 1,
        "risk": 4,
        "title": "Lack of System Monitoring or Logging",
        "type": "Logging and Auditing"
    },
    {
        "affected_hosts": null,
        "affected_users": 4,
        "approved": true,
        "damage": 4,
        "discoverability": 4,
        "dread_total": 20,
        "effort": "Quick",
        "exploitability": 4,
        "id": 19,
        "overview": "<paragraph>During the physical component of the assessment the consultant identified unencrypted backups stored in an unlocked closet. This could allow an attacker to steal thousands of &lt;&lt;Super Secret datas&gt;&gt;. </paragraph><paragraph>This is a critical risk to any organization. The references discussion outlines examples of this issue from the real world.</paragraph>",
        "poc": "<paragraph>The following pictures show the backup tape storage:</paragraph>",
        "references": "",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 4,
        "risk": 4,
        "title": "Unencrypted Backups Tapes (Storage Closet)",
        "type": "Physical"
    },
    {
        "affected_hosts": null,
        "affected_users": 10,
        "approved": true,
        "damage": 10,
        "discoverability": 10,
        "dread_total": 50,
        "effort": "Quick",
        "exploitability": 10,
        "id": 20,
        "overview": "<paragraph>[1] Phishing is misrepresentation where the criminal uses social engineering to appear as a trusted identity. They leverage the trust to gain valuable information; usually details of accounts, or enough information to open accounts, obtain loans, or buy goods through e-commerce sites.</paragraph><paragraph>[1] Up to 5% of users seem to be lured into these attacks, so it can be quite profitable for scammers \u2013 many of whom send millions of scam e-mails a day.</paragraph>",
        "poc": "<paragraph></paragraph>",
        "references": "https://www.owasp.org/index.php/Phishing",
        "remediation": "<paragraph></paragraph>",
        "reproducability": 10,
        "risk": 4,
        "title": "Phishing Attack ",
        "type": "Social Engineering"
    }
]
